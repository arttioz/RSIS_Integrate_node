const { Model, DataTypes } = require('sequelize');
const dbServer = require('../../../config/connections/db_server_raw');

class ISRawData extends Model {}

ISRawData.init(
    {
            ref: { type: DataTypes.INTEGER, primaryKey: true },
            id: DataTypes.BIGINT.UNSIGNED,
            hosp: DataTypes.STRING(10),
            prov: DataTypes.STRING(2),
            hn: DataTypes.STRING(10),
            an: DataTypes.STRING(12),
            titlecode: DataTypes.STRING(10),
            prename: DataTypes.STRING(20),
            name: DataTypes.STRING(30),
            fname: DataTypes.STRING(30),
            lname: DataTypes.STRING(30),
            pid: DataTypes.STRING(20),
            home: DataTypes.STRING(1),
            address: DataTypes.STRING(100),
            tumbon: DataTypes.STRING(2),
            ampur: DataTypes.STRING(50),
            changwat: DataTypes.STRING(50),
            tel: DataTypes.STRING(15),
            sex: DataTypes.TINYINT,
            birth: DataTypes.DATE,
            day: DataTypes.INTEGER,
            month: DataTypes.INTEGER,
            age: DataTypes.INTEGER,
            occu: DataTypes.STRING(2),
            occu_t: DataTypes.STRING(50),
            nationality: DataTypes.STRING(4),
            nation_std: DataTypes.STRING(6),
            adate: DataTypes.DATE,
            atime: DataTypes.TIME,
            hdate: DataTypes.DATE,
            htime: DataTypes.TIME,
            aplace: DataTypes.STRING(4),
            aampur: DataTypes.STRING(2),
            atumbon: DataTypes.STRING(2),
            mooban: DataTypes.STRING(50),
            road_type: DataTypes.STRING(4),
            apoint: DataTypes.STRING(3),
            apointname: DataTypes.STRING(50),
            injby: DataTypes.STRING(1),
            injoccu: DataTypes.STRING(1),
            cause: DataTypes.STRING(1),
            cause_t: DataTypes.STRING(50),
            injp: DataTypes.STRING(1),
            injt: DataTypes.STRING(7),
            vehicle1: DataTypes.STRING(30),
            vehicle1_license: DataTypes.STRING(20),
            vehicle2: DataTypes.STRING(30),
            vehicle2_license: DataTypes.STRING(20),
            injt_t: DataTypes.STRING(50),
            injfrom: DataTypes.STRING(7),
            injfrom_t: DataTypes.STRING(50),
            icdcause: DataTypes.STRING(50),
            activity: DataTypes.STRING(50),
            product: DataTypes.STRING(50),
            alclevel: DataTypes.FLOAT,
            risk1: DataTypes.STRING(1),
            risk2: DataTypes.STRING(1),
            risk3: DataTypes.STRING(1),
            risk4: DataTypes.STRING(1),
            risk5: DataTypes.STRING(1),
            risk9: DataTypes.STRING(1),
            risk9_text: DataTypes.STRING(50),
            pmi: DataTypes.STRING(1),
            atohosp: DataTypes.STRING(1),
            ems: DataTypes.STRING(2),
            atohosp_t: DataTypes.STRING(50),
            htohosp: DataTypes.STRING(50),
            hprov: DataTypes.STRING(2),
            amb: DataTypes.STRING(2),
            refer: DataTypes.STRING(1),
            airway: DataTypes.STRING(1),
            airway_t: DataTypes.STRING(50),
            blood: DataTypes.STRING(1),
            blood_t: DataTypes.STRING(50),
            splintc: DataTypes.STRING(1),
            splntc_t: DataTypes.STRING(50),
            splint: DataTypes.STRING(1),
            splint_t: DataTypes.STRING(50),
            iv: DataTypes.STRING(1),
            iv_t: DataTypes.STRING(50),
            hxcc: DataTypes.STRING(1),
            hxcc_hr: DataTypes.INTEGER,
            hxcc_min: DataTypes.INTEGER,
            bp1: DataTypes.INTEGER,
            bp2: DataTypes.INTEGER,
            bp: DataTypes.STRING(3),
            pr: DataTypes.INTEGER,
            rr: DataTypes.INTEGER,
            e: DataTypes.INTEGER,
            v: DataTypes.INTEGER,
            m: DataTypes.INTEGER,
            coma: DataTypes.INTEGER,
            tinj: DataTypes.STRING(1),
            diser: DataTypes.DATE,
            timer: DataTypes.DATE,
            er: DataTypes.STRING(1),
            er_t: DataTypes.STRING(50),
            staer: DataTypes.STRING(1),
            ward: DataTypes.STRING(4),
            staward: DataTypes.STRING(1),
            diag1: DataTypes.STRING(50),
            br1: DataTypes.INTEGER,
            ais1: DataTypes.INTEGER,
            diag2: DataTypes.STRING(50),
            br2: DataTypes.INTEGER,
            ais2: DataTypes.INTEGER,
            diag3: DataTypes.STRING(50),
            br3: DataTypes.INTEGER,
            ais3: DataTypes.INTEGER,
            diag4: DataTypes.STRING(50),
            br4: DataTypes.INTEGER,
            ais4: DataTypes.INTEGER,
            diag5: DataTypes.STRING(50),
            br5: DataTypes.INTEGER,
            ais5: DataTypes.INTEGER,
            diag6: DataTypes.STRING(50),
            br6: DataTypes.INTEGER,
            ais6: DataTypes.INTEGER,
            rdate: DataTypes.DATE,
            rts: DataTypes.FLOAT,
            iss: DataTypes.INTEGER,
            ps: DataTypes.FLOAT(10, 2),
            ps_thai: DataTypes.FLOAT(10, 2),
            pttype: DataTypes.STRING(4),
            pttype2: DataTypes.STRING(4),
            pttype3: DataTypes.STRING(4),
            acc_id: DataTypes.STRING(7),
            lblind: DataTypes.INTEGER,
            blind1: DataTypes.INTEGER,
            blind2: DataTypes.INTEGER,
            blind3: DataTypes.INTEGER,
            blind4: DataTypes.INTEGER,
            lcost: DataTypes.INTEGER,
            ddate: DataTypes.DATE,
            recorder: DataTypes.STRING(50),
            recorderipd: DataTypes.STRING(50),
            referhosp: DataTypes.STRING(50),
            referprov: DataTypes.STRING(50),
            alctype: DataTypes.STRING(50),
            alcbrand: DataTypes.STRING(50),
            alcbuy: DataTypes.STRING(50),
            alcbuy_t: DataTypes.STRING(50),
            addressbuy: DataTypes.STRING(50),
            moobanbuy: DataTypes.STRING(50),
            tambonbuy: DataTypes.STRING(50),
            ampurbuy: DataTypes.STRING(50),
            changwatbuy: DataTypes.STRING(50),
            buytime: DataTypes.DATE,
            dlt: DataTypes.DATE,
            edt: DataTypes.DATE,
            vn: DataTypes.STRING(20),
            lat: DataTypes.STRING(15),
            lng: DataTypes.STRING(15),
            token: DataTypes.STRING(64),
            incident_id: DataTypes.INTEGER,
            mass_casualty: DataTypes.TINYINT,
            items: DataTypes.STRING(30),
            alcohol_check: DataTypes.STRING(1),
            alcohol_level: DataTypes.FLOAT(10, 2),
            alcohol_check2: DataTypes.STRING(1),
            alcohol_level2: DataTypes.FLOAT(10, 2),
            alcohol_prove: DataTypes.TINYINT,
            alcohol_prove_name: DataTypes.STRING(100),
            car_safe: DataTypes.TINYINT,
            license_card: DataTypes.TINYINT,
            speed_drive: DataTypes.TINYINT,
            roadsafety: DataTypes.TINYINT,
            refer_result: DataTypes.STRING(50),
            late_effect: DataTypes.STRING(10),
            yearly: DataTypes.INTEGER,
            kwd: DataTypes.STRING(20),
            sentmoph: DataTypes.DATE,
            version: DataTypes.STRING(20),
            detail: DataTypes.TEXT,
            remark: DataTypes.TEXT,
            raw_data: DataTypes.TEXT('long', true),
            his: DataTypes.TEXT,
            dgis: DataTypes.DATE,
            dupload: DataTypes.DATE,
            seq: DataTypes.STRING(20),
            pher_id: DataTypes.INTEGER,
            inp_src: DataTypes.STRING(20),
            inp_id: DataTypes.STRING(20),
            edit_id: DataTypes.STRING(20),
            ip: DataTypes.STRING(20),
            lastupdate: {
                    type: DataTypes.NOW,
                    allowNull: false,
                    defaultValue: DataTypes.NOW
            },
            created_at: {
                    type: DataTypes.NOW,
                    allowNull: true,
            },
            updated_at: {
                    type: DataTypes.NOW,
                    allowNull: true,
            },
    },
    {
        sequelize: dbServer,
        tableName: 'is_records',
        timestamps: false,
        underscored: true,
    }
);

module.exports = ISRawData;