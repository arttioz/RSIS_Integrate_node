const { Sequelize, Model, DataTypes } = require('sequelize');
const dbServer = require('../../config/connections/db_server');
class EReport extends Model {}

EReport.init({
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    no: DataTypes.INTEGER,
    acc_no: DataTypes.INTEGER,
    acc_date: DataTypes.DATEONLY,
    acc_time: DataTypes.TIME,
    time: DataTypes.STRING,
    timepart: DataTypes.STRING,
    road_name: DataTypes.STRING,
    road_no: DataTypes.STRING,
    subdistrict: DataTypes.STRING,
    district: DataTypes.STRING,
    branch: DataTypes.STRING,
    province: DataTypes.STRING,
    road_type: DataTypes.STRING,
    road_surface: DataTypes.STRING,
    road1: DataTypes.STRING,
    road2: DataTypes.STRING,
    road3: DataTypes.STRING,
    road4: DataTypes.STRING,
    road5: DataTypes.STRING,
    road6: DataTypes.STRING,
    road7: DataTypes.STRING,
    road8: DataTypes.STRING,
    car_type1: DataTypes.STRING,
    car_type2: DataTypes.STRING,
    crash_type: DataTypes.STRING,
    climate: DataTypes.STRING,
    lighting: DataTypes.STRING,
    damage: DataTypes.INTEGER,
    causes: DataTypes.STRING,
    drinking: DataTypes.STRING,
    fast: DataTypes.STRING,
    traffic_lights: DataTypes.STRING,
    traffic_signs: DataTypes.STRING,
    reverse: DataTypes.STRING,
    overtaking: DataTypes.STRING,
    phone: DataTypes.STRING,
    cutting: DataTypes.STRING,
    drugs: DataTypes.STRING,
    sleep: DataTypes.STRING,
    overload: DataTypes.STRING,
    roadblock: DataTypes.STRING,
    poor_visibility: DataTypes.STRING,
    car_type: DataTypes.STRING,
    car_type_sub: DataTypes.STRING,
    car_plate_no: DataTypes.STRING,
    car_status: DataTypes.STRING,
    insurance: DataTypes.STRING,
    fullname: DataTypes.STRING,
    sex: DataTypes.STRING,
    age: DataTypes.INTEGER,
    cid: DataTypes.STRING,
    age_part: DataTypes.STRING,
    nation: DataTypes.STRING,
    status_couple: DataTypes.STRING,
    status_person: DataTypes.STRING,
    risk1: DataTypes.STRING,
    risk2: DataTypes.STRING,
    risk3: DataTypes.STRING,
    local: DataTypes.STRING,
    dead_area: DataTypes.STRING,
    deliverer: DataTypes.STRING,
    risk_p_acc: DataTypes.STRING,
    risk_p_law: DataTypes.STRING,
    risk_p_helmet: DataTypes.STRING,
    risk_p_motobike: DataTypes.STRING,
    risk_p_drink: DataTypes.STRING,
    risk_p_belt: DataTypes.STRING,
    risk_p_licence: DataTypes.STRING,
    risk_p_fast: DataTypes.STRING,
    risk_p_light: DataTypes.STRING,
    risk_p_sign: DataTypes.STRING,
    risk_p_reverse: DataTypes.STRING,
    risk_p_overtake: DataTypes.STRING,
    risk_p_phone: DataTypes.STRING,
    risk_p_sleep: DataTypes.STRING,
    risk_p_cut: DataTypes.STRING,
    risk_p_drug: DataTypes.STRING,
    risk_p_overload: DataTypes.STRING,
    risk_p_truck: DataTypes.STRING,
    other: DataTypes.STRING,
    number_of_accident: DataTypes.INTEGER,
    longitude: DataTypes.DOUBLE,
    latitude: DataTypes.DOUBLE,

    prename: { type: DataTypes.STRING(100) },
    name: { type: DataTypes.STRING(100) },
    lname: { type: DataTypes.STRING(100) },
    adate: { type: DataTypes.DATEONLY },
    match: { type: DataTypes.STRING(255) },
    is_duplicate: { type: DataTypes.INTEGER },
    project_file_id: { type: DataTypes.INTEGER },
    project_id: { type: DataTypes.INTEGER },
    created_at: { type: DataTypes.DATE },
    updated_at: { type: DataTypes.DATE }
}, {
    sequelize: dbServer,
    tableName: 'temp_e_report_clean',
    timestamps: false
});

module.exports = EReport;
